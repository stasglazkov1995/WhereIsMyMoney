// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhereIsMyMoney.DAL.Context;

#nullable disable

namespace WhereIsMyMoney.DAL.Migrations
{
    [DbContext(typeof(WhereIsMyMoneyDbContext))]
    [Migration("20250219224730_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.CurrencyManagement.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.Group.PaymentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PaymentGroups");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.Group.PaymentGroupToUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PaymentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentGroupToUser");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentGroupId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.PaymentPayByUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PaymentId", "UserId")
                        .IsUnique();

                    b.ToTable("PaymentPayByUser");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.PaymentShareWithUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PaymentId", "UserId")
                        .IsUnique();

                    b.ToTable("PaymentShareWithUser");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.Group.PaymentGroup", b =>
                {
                    b.HasOne("WhereIsMyMoney.DAL.Entities.CurrencyManagement.Currency", "Currency")
                        .WithMany("PaymentGroups")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.Group.PaymentGroupToUser", b =>
                {
                    b.HasOne("WhereIsMyMoney.DAL.Entities.Group.PaymentGroup", "PaymentGroup")
                        .WithMany("PaymentGroupToUsers")
                        .HasForeignKey("PaymentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhereIsMyMoney.DAL.Entities.UserManagement.User", "User")
                        .WithMany("PaymentGroupToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.Payment", b =>
                {
                    b.HasOne("WhereIsMyMoney.DAL.Entities.Group.PaymentGroup", "PaymentGroup")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentGroup");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.PaymentPayByUser", b =>
                {
                    b.HasOne("WhereIsMyMoney.DAL.Entities.PaymentManagement.Payment", "Payment")
                        .WithMany("PaymentPayByUsers")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhereIsMyMoney.DAL.Entities.UserManagement.User", "User")
                        .WithMany("PaymentPayByUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.PaymentShareWithUser", b =>
                {
                    b.HasOne("WhereIsMyMoney.DAL.Entities.PaymentManagement.Payment", "Payment")
                        .WithMany("PaymentShareWithUsers")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhereIsMyMoney.DAL.Entities.UserManagement.User", "User")
                        .WithMany("PaymentShareWithUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.CurrencyManagement.Currency", b =>
                {
                    b.Navigation("PaymentGroups");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.Group.PaymentGroup", b =>
                {
                    b.Navigation("PaymentGroupToUsers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.PaymentManagement.Payment", b =>
                {
                    b.Navigation("PaymentPayByUsers");

                    b.Navigation("PaymentShareWithUsers");
                });

            modelBuilder.Entity("WhereIsMyMoney.DAL.Entities.UserManagement.User", b =>
                {
                    b.Navigation("PaymentGroupToUsers");

                    b.Navigation("PaymentPayByUsers");

                    b.Navigation("PaymentShareWithUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
